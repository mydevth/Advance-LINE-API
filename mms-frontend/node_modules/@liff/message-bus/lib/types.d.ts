import { EVENT_NAME, ACTION, WINDOW } from './consts';
export declare type ActionType = typeof ACTION[keyof typeof ACTION];
export declare type EventNameType = typeof EVENT_NAME[keyof typeof EVENT_NAME];
export declare type EventContext = {
    eventName: EventNameType;
    key?: string;
    data?: object | string;
};
export declare type EventBase = {
    timestamp: number;
    identifier: string;
    action: ActionType;
};
export interface Event extends EventBase {
    context: EventContext;
    replyTarget?: EventBase;
}
export interface EncryptedEvent extends EventBase {
    context: string;
    replyTarget?: EventBase;
}
export declare type EventHandler = (event: Event) => void | Promise<void>;
export declare type WindowType = typeof WINDOW[keyof typeof WINDOW];
export declare type Identification = {
    identifier: string;
    cryptoKey: string;
};
